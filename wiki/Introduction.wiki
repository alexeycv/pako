*Bbodio* is the main developer of the curent project. 
If you want to join the project notify me:

ICQ: _398-238-474_

Jabber: _bbodio at jabber.ru_

Mail: _bbodio at i.ua_

= About =
This is a an executable, which is binded to several dlls'.

*Labels:*

 - *XML* - this means that the associated file has to be written in XML language, according to all feauters of XML-specification

 - *Needed* - this means that associated file is needed for any start of bot: program can not launch without it.

 - *Optional* - this means that associated file can be missed when starting the bot: program will recreate it by it-self.

 - *Open* - this means that associated file can be changed and edited manually: if it's XML file than with special redactor, whcih writes according to XMl specification.

 - *Closed* - this measn that associated file can not be changed/edited manually. 

----

= Containing =

- *Pako.exe* -> The main engine, which initializes all processes and creates a new instance of xmpp-session

- *Core.dll* -> Handles all the bot/xmpp processes: provides all the session.

- *agsXMPP.dll* -> This library is an official XMPP-many-featured dll 
of [http://www.ag-software.de AG-Software], which supports lots-of-XEP-featured Jabber-session.
I think, this is the most featured and stable jabber-library of all.


- *Pako.cfg* -> This is a bot conmain configurator, which can set the xmpp-connection attributes and options and the bot default behaviour.

- *Mono.Data.SqliteClient.dll* -> This is a library , which provides SQLite data-bases connection. Is *Needed* on Microsoft .NET. Is *Optional* on Mono.

- *SQLite3.dll* -> This is SQLite wrapper , written on C.

- *Static* -> Folder, where is rfc3921.txt located - it's needed for rfc-reading support. You can easy navigate through rfc3921 by bot.

- *Data* -> Folder, where are data-bases, containing specific information about chat-rooms.

- *Dynamic* -> This folder containes
 
   _Different types of XML configurators:_
 * Rooms.base -> contains information about auto-entering chat-rooms.
 * Users.base -> contains information about specific JIDs, for which bot makes exceptions in his behaviour (language, access level). 
 * Access.base - contains information about the minimum accessing level for each command.
 ** P.S. All the listed files can be changed dynamicly , by sending command to bot.

  _Data bases:_
 * Censor.db -> RegEx patterns , which bot gets as censored words and kicks/notifies.
 * Dictionary.db -> a db, containg a simple dictinary(phrase <-> meaning) , which saves info by author.

- *Plugins* -> Conatins optionaly-added dlls, which provide new volumes->new commands.
A plugin can be created and added by anyone. A plugin can be added to any session : before or dynamicly (see "admin pl_load" and "admin pl_unload" cmds).

- *Lang* -> Contains different languages-packs. Each language has to loo like this:
 * Main folder, which has to be named after short international format of country: en, ru, ua, gb and so...
 * In main folder there has to be 2 files: 

   "help.pack" - contains information about syntax of all the commands.

   "lang.pack" - contains all the response-patterns - the way how bot will reply to client.

- *Error.log* -> a log, containg all the bug-reports , which occured while replying to client. 

----
= Getting started =

There are two ways of getting bot on your computer:
 * You can download binaries (already compiled program, ready for using);
 * Download sources, compile it with a C# .NET compiler.

The second way is saftier, beacuse if you compile it on platfrom, on which you eant to use the bot, you'll already know, what's wrong/didn't compile. But anyway .NET applicationa doen't matter on which platfrom they are compiled: on *.exe or *.dll can run on all platforms without recompiling! 


*If you want to compile the bot by your own:*




= Compiling =

Choose your platform:

- *WINDOWS* : You need Microsoft Visual Studio .NET 2005/2008 installed on your machine or Microsoft Visual C# 2005/2008.

[http://www.microsoft.com Microsoft]

  _Requirments:_ 

    - *.NET Framework >= v2.0*

----

*Labels:*

- *Closed*

- *Needed*

Choose and download the latest archive, labeled 'sources'. Unzip it to some free directory : there are 'Plugins', 'Core', 'Pako'.
First you have to compile the main core-part of a bot:
Open Visual Studio/Visual C# . On menu-item 'File' you will find 'Open' -> 'Project/Solution'.
In a dialog-window, which will appear , find directory , where the Core solution is.
Open Core.sln.
When solution is loaded, choose menu-item 'Build' -> 'Build Solution'.
If no errors, then everything is ok. See at the bottom of the IDE's main window a label 'Build succeeded'.
Now open the Core-solution's directory and there will be compiled Core.dll.

----

*Labels:*

- *Closed*

- *Needed*

Let's compile a main starter:
Find in in the directory, where you unziped archive a folder 'Pako', open 'Pako.sln' using your IDE.
Build it, like the previous time you did with Core.dll.
After compiled successfully you have Pako.exe.
It's compiled in /Pako/Pako/bin/Release. Let's use this directory as default(when we talk about /Data we mean /Pako/Pako/bin/Release/Data)

Put there Core.dll.

So we already have:

 * /Dynamic, 
 * _Pako.exe_, 
 * /Data,
 * /Static, 
 * /Lang,
 * /Plugins
 * _Core.dll_

----

- *UNIX/LINUX/MAC OS* : You need to donwload *Mono* - a nice analogic platform of .NET for any platforms. Has ability to run and compile C# and other .NET languages (Boo, VB..) on for example FreebSD, Linux-distributives, MAC OS X etc.




  _Requirments:_

   - *Mono >= v1.2.5.1*,

   - *'mcs' and 'gmcs' C# compilers, SQLite3 library (not installed by default on FreeBSD)*






*Labels:*

- *Closed*

- *Optional*

Now you have to compile all the solutions from the folder 'Plugins'. As result you'll have these dlls:
  - *Muc.dll*

  - *Admin.dll*

  - *Misc.dll*

  - *Def.dll*

  - *Dict.dll*

  - *Web.dll*

You have to put those dlls into /Plugins. These are the plug-ins for bot (without them bot has no commands).
Now you only have to fill all the configurators.


----
Let's take a look at /Lang
There can be added unlimited count of language-packets. Each language packet is:a directory, named after international name of country, which represents current language
Int his directory, has to "help.pack" and "lang.pack";

----
*Labels:*

- *Open*

- *Optional*

Example of lang.pack:

{{{
<lang>
   <patterns 
   admin_leave="Bye, i'm leaving :)"
   ...
   help_not_found="The information about the command {1} was not found"
   />
}}}

See: "patterns" has to caontain all the patterns, which bot will use to answer to user. See the original /Lang/en/lang.pack to get a full list of needed patterns for the language-packet.
So if the bot has to answer with pattern admin_leave(which is used to notify administartors, that bot is shutting down), he will answer whatever you fill in thius attribute. 
if the user wants to get help for some command , which has no documentation yet (see help.pack syntax), bot will use help_not_found pattern to answer.
That means that you can fully change his answers as you wich and he can even talk French or German :).
P.S. the patterns are formatted: if you had noticed the {1}, then this is asign , which will be replaced by something, specified by bot. In help_not_found {1} is a exact command, which documentation was not found.



----
*Labels:*

- *Open*

- *Optional*

Example of help.pack:

{{{
<help>
   <command name="muc kick" value="Please follow this syntax:&#xA;{1}muc kick 'nick'&#xA;where 'nick' is any user to kick" />
   <command name="muc setsubject" value="Please follow this syntax:&#xA;{1}muc subject newsubject &#xA;where 'newsubject' is any subject chat-room" />  
</help> 
}}} 
See: it contains all documentation for commands: corerct syntax and short discription. Every tag "command" is responsible for one command. it conatins an attribute "name" where has to be a name of command and attribute "value" where has to be exact  text, which bot will return as documentation for current command.
See the {1} in "value" - this is prefix, which is used to type commands(this sign is dynamic, so bot has always to replace {1} with the current prefix. 

=== Warning: you MUST name language-directories properly, as by default: ===
=== /en or /ru etc. Because you will later use those name as language name ===
=== If the language directory is /en than tha language is called "en" === 


----


*Labels:*

- *Open*

- *Optional*

First let's take it to main Pako.cfg.

Thsi is configurator, where you can specify all the XMPP-connection attributes:
Example of config is already included into the source package.
Open it and follow the tips near each field and you're done.

Part of Pako.cfg:
{{{
<Config>
   <bot>
    # Main language, which bot will use as default
    #<lang value="en" />
     
     ...

    # Here you have to input the list of administartors of bot, using delimiter "|"
    #<admins value="jid1@server.dom|jid2@server.dom" />

    # Specifies the access of bot administrators, which will be used as default
    #<delimiter value="*" />

  </bot>
</Config>
}}}

See: each tag has a comment, which helps to set correctly. Each atg has a "value" attribute, where you should fill-in the values of the parameter: for example:

{{{
<lang value="en" />
}}}
See: here you have to fill-in a default language, which bot will use to comunicate with users. So you should fill-in inti 'value" attribute a name of a language. Please check twice if it's correct.
 
{{{
<admins value="jid1@server.dom|jid2@server.dom" />
}}}
See: the "admins" tag, where you have to fill-in an unlimited number of administartors, whose access-level is ALWAYS 100 (use sign "|" to separate jids). If you want to use one jid as administartor's you just use this: value="jid@server.dom"

{{{
<delimiter value="*" />
}}}
See: here you have specify a signh, which will be used for entering  commands.
As default there is {{{ * }}}, that means that all the  commands have to be type like that:
{{{
*muc setsubject My New subject
*web google 1 pako
}}}

If deleimier is ? than all the commands have to look like this:
{{{
?muc mynick Pako2
?def add pako = bot
}}}




----
Let's take it to /Dynamic directory.
You can fill all this configurators by your-self, or you can make changes during bot-session.

----
*Labels:*

- *Open*

- *Optional*

Users.base:

here you can specify individual behaviour of bot for any jid: language/access-level.

Example of Users.base:
{{{
<Users>
<usersdata>
  <user jid="myjid@server.dom" lang="en" access="100" />
  <user jid="somejid@server.dom" access="50" />
</usersdata>
</Users>
}}}

There must be at least one option:lang/access:

 # Bot will always talk in english to myjid@server.dom and will be accessed by myjid@server.dom with level 100.
 # Somejid@server.dom will always access bot with level 50, but bot will talk to him without any special previlegiouses (according to the situation).





----

*Labels:*

- *Open*

- *Optional*

Rooms.base
You have to specify 1 or more rooms, where bot will join each time when starting.
Open /Dynamic/Rooms.base and follow the example. You can add unlimited count of chat-rooms.

Example of Rooms.base:
{{{
<amucs>
  <rooms>
    <room lang="en" jid="talks@conference.server.dom" nick="Pako" status="Hello :)" />
    <room lang="en" jid="chat@conference.server.dom"  nick="Pako" status="hello :-D" />
  </rooms>
</amucs>
}}}
So we can see that he will enter two rooms when starting:

 # chat@conference.server.dom with status "hello :-D" and nick "Pako"
 # talks@conference.server.dom with status "Hello :)" and nick "Pako"


----

*Labels:*

- *Open*

- *Optional*

Access.base:
Here you can specify the minimum access, which user needs to access the command:

Example of Access.base:
{{{
<Access>
   <command name="muc kick" access="50" />
   <command name="muc setsubject" access="50" />
    ...
   <command name="muc censor" access="70" />
   <command name="muc uncensor" access="70" />
</Access>
}}}


For example, if you want to access command "muc kick" , you're access-level has to be at least 50, if you want to use command "muc censor" then you're access level has to be at least 70.  
You can specify unlimited count of commands and access-level, needed for them.


----
Let's take it to /Static directory.

*Labels:*

- *Open*

- *Optional*

Here you can see rfc3921.txt - this is full RFC 3921, written by Peter Saint-Andre : the specification of XMPP protocol.
Bot uses it to execute command "web rfc" from a Web.dll plug-in. This command is a rfc 3921 explorer: you can read any state of this document using state-number(1.1 or 2.2.1)







= Related links = 

 * [http://www.mono-project.com Mono-Project]

  Downlaod Mono binaries, sources for any OS. Take part in mailing lists, forums, discuss, ask, get answers : enjoy :)

 * [http://www.go-mono.com Go-Mono]

   A lot of interesting stuff, downloads, dedicated  to Mono.

 * [http://www.codeproject.com CodeProject]
 
  A best place for .NET-programmer. Tons of examples to see, thousands of new friends to get, Tons of interesting themes to read.
 
 * [http://ag-software.de AG-Software] 

  Home of *agsXMPP*. Site related to MiniClient and agsXMPP Jabber library. binaries, sources, examples, forum.

 * [http://www.c-sharpcorner.com C-SharpCorner]

   C#, ASP, WPF, WCF .NET, Windows Vista Community.

 * [http://www.sqlite.org/download.html SQLite] 

  Download the freshest SQLite3

 * [http://www.gnu.org/licenses/gpl.html GNU/GPL v3] 

  See the license agreement.
 




= Bugs =

If you had found any bugs or mistakes in the code, please save the bug report and send it to me with detailed information about where and when bug occurred. I'll try to fix the problem.
New ideas and comments are always welcomed. Mail me about your idea and i will think about - maybe the next , what will be modified in the code - will be your idea!.


= Support =

 - The main developing chat-room:         *dotnet@conference.jabber.ru*
 - XMPP support and Jabber Development:   *jdev@conference.jabber.org* 
 - Jabber bots consultation:              *roso@conference.jabber.ru*

= Special thanks =

_*Alex* (agsXMPP author and code support),

*vt* (code support and testing), 

*fix* (hosting),  

*Pily* (language packs creating and testing)_.

Thank guys! :) 