*Bbodio* is the main developer of the curent project. 
If you want to join the project notify me:

ICQ: _398-238-474_

Jabber: _bbodio at jabber.ru_

Mail: _bbodio at i.ua_

= About =
This is a an executable, which is binded to several dlls'.

-- --
 -- 
__
 __



Containing:

- *Pako.exe* -> The main engine, which initializes all processes and creates a new instance of xmpp-session

- *Core.dll* -> Handles all the bot/xmpp processes: provides all the session.

- *agsXMPP.dll* -> This library is an official XMPP-many-featured dll 
of [http://www.ag-software.de AG-Software], which supports lots-of-XEP-featured Jabber-session.
I think, this is the most featured and stable jabber-library of all.


- *Pako.cfg* -> This is a bot conmain configurator, which can set the xmpp-connection attributes and options and the bot default behaviour.
- *Mono.Data.SQLClient.dll* -> This is a library , which provides SQLite data-bases connection. Is *needed* on Microsoft .NET. Is *optional* on Mono.

- *SQLite3.dll* -> This is SQLite wrapper , written on C.

- *Static* -> Folder, where is rfc3921.txt located - it's needed for rfc-reading support. You can easy navigate through rfc3921 by bot.

- *Data* -> Folder, where are data-bases, containing specific information about chat-rooms.

- *Dynamic* -> This folder containes
 
   _Different types of XML configurators:_
 * Rooms.base -> contains information about auto-entering chat-rooms.
 * Users.base -> contains information about specific JIDs, for which bot makes exceptions in his behaviour (language, access level). 
 * Access.base - contains information about the minimum accessing level for each command.
 ** P.S. All the listed files can be changed dynamicly , by sending command to bot.

  _Data bases:_
 * Censor.db -> RegEx patterns , which bot gets as censored words and kicks/notifies.
 * Dictionary.db -> a db, containg a simple dictinary(phrase <-> meaning) , which saves info by author.

- *Plugins* -> Conatins optionaly-added dlls, which provide new volumes->new commands.
A plugin can be created and added by anyone. A plugin can be added to any session : before or dynamicly (see "admin pl_load" and "admin pl_unload" cmds).

- *Lang* -> Contains different languages-packs. Each language has to loo like this:
 * Main folder, which has to be named after short international format of country: en, ru, ua, gb and so...
 * In main folder there has to be 2 files: 

   "help.pack" - contains information about syntax of all the commands.

   "lang.pack" - contains all the response-patterns - the way how bot will reply to client.

- *Error.log* -> a log, containg all the bug-reports , which occured while replying to client. 

 
= Getting started =

There are two ways of getting bot on your computer:
 * You can download binaries (already compiled program, ready for using);
 * Download sources, compile it with a C# .NET compiler.

The second way is saftier, beacuse if you compile it on platfrom, on which you eant to use the bot, you'll already know, what's wrong/didn't compile. But anyway .NET applicationa doen't matter on which platfrom they are compiled: on *.exe or *.dll can run on all platforms without recompiling! 


*If you want to compile the bot by your own:*

Choose your platform:

- *WINDOWS* : You need Microsoft Visual Studio .NET 2005/2008 installed on your machine or Microsoft Visual C# 2005/2008.

[http://www.microsoft.com Microsoft]

  _Requirments:_ 

    - *.NET Framework >= v2.0*


Choose and download the latest archive, labeled 'sources'. Unzip it to some free directory : there are 'Plugins', 'Core', 'Pako'.
First you have to compile the main core-part of a bot:
Open Visual Studio/Visual C# . On menu-item 'File' you will find 'Open' -> 'Project/Solution'.
In a dialog-window, which will appear , find directory , where the Core solution is.
Open Core.sln.
When solution is loaded, choose menu-item 'Build' -> 'Build Solution'.
If no errors, then everything is ok. See at the bottom of the IDE's main window a label 'Build succeeded'.
Now open the Core-solution's directory and there will be compiled Core.dll.


Let's compile a main starter:
Find in in the directory, where you unziped archive a folder 'Pako', open 'Pako.sln' using your IDE.
Build it, like the previous time you did with Core.dll.
After compiled successfully you have Pako.exe.
It's compiled in /Pako/Pako/bin/Release. Let's use this directory as default(when we talk about /Data we mean /Pako/Pako/bin/Release/Data)

Put there Core.dll.

So we already have:

 * /Dynamic, 
 * _Pako.exe_, 
 * /Data,
 * /Static, 
 * /Lang,
 * /Plugins
 * _Core.dll_

Now you have to compile all the solutions from the folder 'Plugins'. As result you'll have these dlls:
  - *Muc.dll*

  - *Admin.dll*

  - *Misc.dll*

  - *Def.dll*

  - *Dict.dll*

  - *Web.dll*

you have to put those dlls into /Plugins. These are the plug-ins for bot (without them bot has no commands).
Now you only have to fill all the configurators.

First let's take to main Pako.cfg.

Thsi is configurator, where you can specify all the XMPP-connection attributes:
Example of config is already included into the source package.
Open it and follow the tips near each field and you're done.


Let's take it to /Dynamic directory.
You can fill all this configurators by your-self, or you can make changes during bot-session.

= !!! =

You have to specify 1 or more rooms, where bot will join each time when starting.
Open /Dynamic/Rooms.base and follow the example. You can add unlimited count of chat-rooms.









- *UNIX/LINUX/MAC OS* : You need to donwload *Mono* - a nice analogic platform of .NET for any platforms. Has ability to run and compile C# and other .NET languages (Boo, VB..) on for example FreebSD, Linux-distributives, MAC OS X etc.




  _Requirments:_

   - *Mono >= v1.2.5.1*,

   - *'mcs' and 'gmcs' C# compilers, SQLite3 library (not installed by default on FreeBSD)*



= Related links = 

 * [http://www.mono-project.com Mono-Project]

  Downlaod Mono binaries, sources for any OS. Take part in mailing lists, forums, discuss, ask, get answers : enjoy :)

 * [http://www.go-mono.com Go-Mono]

   A lot of interesting stuff, downloads, dedicated  to Mono.

 * [http://www.codeproject.com CodeProject]
 
  A best place for .NET-programmer. Tons of examples to see, thousands of new friends to get, Tons of interesting themes to read.
 
 * [http://ag-software.de AG-Software] 

  Home of *agsXMPP*. Site related to MiniClient and agsXMPP Jabber library. binaries, sources, examples, forum.

 * [http://www.c-sharpcorner.com C-SharpCorner]

   C#, ASP, WPF, WCF .NET, Windows Vista Community.

 * [http://www.gnu.org/licenses/gpl.html GNU/GPL v3] 

  See the license agreement.
 




= Bugs =

If you had found any bugs or mistakes in the code, please save the bug report and send it to me with detailed information about where and when bug occurred. I'll try to fix the problem.
New ideas and comments are always welcomed. Mail me about your idea and i will think about - maybe the next , what will be modified in the code - will be your idea!.